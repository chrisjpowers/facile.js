// Generated by CoffeeScript 1.3.3
(function() {
  var $, bindArray, bindAttributeObject, bindData, bindNestedObject, bindObject, bindOrRemove, bindValue, combineClasses, facile, find, isFunction, resolve, tagName;

  $ = this.$ || require("cheerio");

  find = function($el, key) {
    var $result;
    $result = $el.find('#' + key);
    if ($result.length === 0) {
      $result = $el.find('.' + key);
    }
    return $result;
  };

  combineClasses = function(existingClasses, newClasses) {
    if (existingClasses) {
      if (newClasses.length > 0) {
        return "" + existingClasses + " " + newClasses;
      } else {
        return existingClasses;
      }
    } else {
      return newClasses;
    }
  };

  facile = function(template, data, cb) {
    var $template, key, peel, tuples, val, value;
    $template = $('<div />').append($(template));
    if (cb) {
      tuples = (function() {
        var _results;
        _results = [];
        for (key in data) {
          val = data[key];
          _results.push([key, val]);
        }
        return _results;
      })();
      peel = function() {
        var _ref;
        if (tuples.length > 0) {
          _ref = tuples.shift(), key = _ref[0], val = _ref[1];
          return resolve(val, function(err, value) {
            if (err) {
              return cb(err);
            }
            return bindOrRemove($template, key, value, function(err) {
              if (err) {
                return cb(err);
              }
              return peel();
            });
          });
        } else {
          return cb(null, $template.html());
        }
      };
      return peel();
    } else {
      for (key in data) {
        value = data[key];
        bindOrRemove($template, key, resolve(value));
      }
      return $template.html();
    }
  };

  facile.compile = function(template, options) {
    return function(locals) {
      return facile(template, locals);
    };
  };

  bindOrRemove = function($template, key, value, cb) {
    var $el;
    if (value != null) {
      return bindData($template, key, value, cb);
    } else {
      $el = find($template, key);
      $el.remove();
      if (cb) {
        return cb();
      }
    }
  };

  bindData = function($template, key, value, cb) {
    var $target;
    if (value.constructor === Array) {
      return bindArray($template, key, value, cb);
    } else if (value.constructor === Object) {
      $target = find($template, key);
      return bindObject($target, key, value, cb);
    } else {
      return bindValue($template, key, value, cb);
    }
  };

  bindArray = function($template, key, value, cb) {
    var $child, $nested, $root, index, peel;
    $root = find($template, key);
    if ($root.length === 0) {
      if (cb) {
        cb();
      }
      return;
    }
    $nested = find($root, key);
    if ($nested.length > 0) {
      $root = $nested;
    }
    if (tagName($root) === "TABLE") {
      $root = $root.find('tbody');
    }
    $child = $root.children().remove();
    index = 0;
    peel = function() {
      var $clone, arrayValue, newHtml;
      if (index < value.length) {
        arrayValue = value[index];
        index++;
        $clone = $child.clone();
        if (arrayValue.constructor === Object) {
          if (cb) {
            return facile($clone, arrayValue, function(err, newHtml) {
              if (err) {
                return cb(err);
              }
              $root.append(newHtml);
              return peel();
            });
          } else {
            newHtml = facile($clone, arrayValue);
            $root.append(newHtml);
            return peel();
          }
        } else {
          if (cb) {
            return resolve(arrayValue, function(err, val) {
              if (err) {
                return cb(err);
              }
              $clone.html(val);
              $root.before($clone);
              return peel();
            });
          } else {
            $clone.html(resolve(arrayValue));
            $root.before($clone);
            return peel();
          }
        }
      } else {
        if (cb) {
          return cb();
        }
      }
    };
    return peel();
  };

  bindObject = function($template, key, value, cb) {
    if (value.content != null) {
      return bindAttributeObject($template, key, value, cb);
    } else {
      return bindNestedObject($template, key, value, cb);
    }
  };

  tagName = function($el) {
    if ($el.prop) {
      return $el.prop("tagName");
    } else {
      return $el[0].name.toUpperCase();
    }
  };

  bindValue = function($template, key, value, cb) {
    var $el, attr, _ref;
    if (key.indexOf('@') !== -1) {
      _ref = key.split('@'), key = _ref[0], attr = _ref[1];
      $el = find($template, key);
      if (tagName($el) === 'SELECT') {
        $el.find("option[value='" + value + "']").attr('selected', 'selected');
      } else {
        $el.attr(attr, value);
      }
    } else {
      $el = find($template, key);
      if ($el.length > 0) {
        if (tagName($el) === 'INPUT' && $el.attr('type') === 'checkbox' && value) {
          $el.attr('checked', "checked");
        } else if (tagName($el) === 'INPUT' || tagName($el) === 'OPTION') {
          $el.attr('value', '' + value);
        } else if (tagName($el) === 'SELECT' && value.constructor !== Object) {
          $el.find("option[value='" + value + "']").attr('selected', 'selected');
        } else {
          $el.html('' + value);
        }
      }
    }
    if (cb) {
      return cb();
    }
  };

  bindNestedObject = function($template, key, value, cb) {
    var attr, attrValue, peel, tuples, _results;
    if (cb) {
      tuples = (function() {
        var _results;
        _results = [];
        for (attr in value) {
          attrValue = value[attr];
          _results.push([attr, attrValue]);
        }
        return _results;
      })();
      return peel = function() {
        var _ref;
        if (tuples.length > 0) {
          _ref = tuples.shift(), attr = _ref[0], attrValue = _ref[1];
          return resolve(attrValue, function(err, resolvedValue) {
            if (err) {
              return cb(err);
            }
            return bindOrRemove($template, attr, resolvedValue, function(err) {
              if (err) {
                return cb(err);
              }
              return peel();
            });
          });
        }
      };
    } else {
      _results = [];
      for (attr in value) {
        attrValue = value[attr];
        _results.push(bindOrRemove($template, attr, resolve(attrValue)));
      }
      return _results;
    }
  };

  bindAttributeObject = function($template, key, value, cb) {
    var attr, attrValue, val, _results;
    if (cb) {
      return resolve(value.content, function(err, content) {
        var attr, attrValue, peel, tuples;
        if (err) {
          return cb(err);
        }
        $template.html(content);
        tuples = (function() {
          var _results;
          _results = [];
          for (attr in value) {
            attrValue = value[attr];
            _results.push([attr, attrValue]);
          }
          return _results;
        })();
        peel = function() {
          var _ref;
          if (tuples.length > 0) {
            _ref = tuples.shift(), attr = _ref[0], attrValue = _ref[1];
            if (attr === "content") {
              return peel();
            }
            return resolve(attrValue, function(err, val) {
              if (err) {
                return cb(err);
              }
              if (attr === 'class') {
                $template.attr('class', combineClasses($template.attr('class'), val));
              } else {
                $template.attr(attr, val);
              }
              return peel();
            });
          }
        };
        return peel();
      });
    } else {
      $template.html(resolve(value.content));
      _results = [];
      for (attr in value) {
        attrValue = value[attr];
        if (!(attr !== 'content')) {
          continue;
        }
        val = resolve(attrValue);
        if (attr === 'class') {
          _results.push($template.attr('class', combineClasses($template.attr('class'), val)));
        } else {
          _results.push($template.attr(attr, val));
        }
      }
      return _results;
    }
  };

  resolve = function(functionOrValue, cb) {
    var result;
    if (isFunction(functionOrValue)) {
      if (cb) {
        if (functionOrValue.length === 1) {
          return functionOrValue(cb);
        } else {
          try {
            result = functionOrValue();
            return cb(null, result);
          } catch (e) {
            return cb(e);
          }
        }
      } else {
        return functionOrValue();
      }
    } else {
      if (cb) {
        return cb(null, functionOrValue);
      } else {
        return functionOrValue;
      }
    }
  };

  isFunction = function(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  };

  if (this.window) {
    window.facile = facile;
  } else {
    module.exports = facile;
  }

}).call(this);
